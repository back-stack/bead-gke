# This is the configuration for Porter
# You must define steps for each action, but the rest is optional
# See https://getporter.org/bundle/manifest/file-format/ for a description of all the allowed fields in this document.
# See https://getporter.org/author-bundles for documentation on how to configure your bundle.
# Uncomment out the sections below to take full advantage of what Porter can do!

schemaType: Bundle
schemaVersion: 1.0.1
registry: "ghcr.io"
name: backstack-porter-bead
description: "BACK Stack Bead for GKE porter bundle"
dockerfile: template.Dockerfile

# Declare and optionally configure the mixins used by the bundle
mixins:
  - exec
  - docker
  - helm3:
      clientVersion: v3.14.3 # CHANGEME
  # BUG: there is a mixin bug with the helm plugin which has a hardcoded version of kubectl
  # need to install the kube mixin AFTER the helm3 one in order to leave the image with a semi
  # working kubectl. There is still a layer with kubectl of older persuasion in the image though
  - kubernetes:
      clientVersion: v1.29.1 # CHANGEME

# Below is an example of how to define credentials
# See https://getporter.org/author-bundles/#credentials
credentials:
  - name: github-token
    env: GITHUB_TOKEN
    description: Github token used to create PRs for clusters and applications from the BACK Stack HUB
    applyTo:
      - install
  - name: gcp-credentials
    required: false
    env: GCP_CREDENTIALS
    description: GCP Credentials JSON file as generated by -- gcloud iam service-accounts keys create
    path: /home/nonroot/.gcloud/credentials.json
    applyTo:
      - install
      - upgrade
      - uninstall
  - name: gcp-credentials-project
    required: false
    description: Google Project ID
    env: GCP_CREDENTIALS_PROJECT
    applyTo:
      - install
  - name: kubeconfig
    path: /home/nonroot/.kube/config
    description: Local Kubeconfig file to use for HUB installation. Skip if using KinD
    required: false
    applyTo:
      - install
      - upgrade
      - uninstall

# Below is an example of how to define parameters
# See https://getporter.org/author-bundles/#parameters
parameters:
  - name: repository
    env: REPOSITORY
    type: string
    default: https://github.com/nirmata/backstack-bead-gke
  - name: request-repository
    env: REQUEST_REPOSITORY
    type: string
    default: https://github.com/nirmata/backstack-internal-requests
  - name: github-token-user
    env: GITHUB_TOKEN_USER
    type: string
    default: back-stack
  - name: registry
    env: REGISTRY
    type: string
    default: ghcr.io
  - name: crossplane-image-repository
    env: CROSSPLANE_IMAGE
    type: string
    default: nirmata/backstack-bead-gke-crossplane
  - name: crossplane-image-tag
    env: CROSSPLANE_IMAGE_TAG
    type: string
    default: latest

# Below is an example of how to define state variables
# for the terraform mixin. This allows you to track
# terraform state using the bundle instead of configuring
# a remote backend.
# See https://getporter.org/author-bundles/#state
# state:
#  - name: tfstate
#    path: terraform/terraform.tfstate
#  - name: tfvars
#    path: terraform/terraform.tfvars.json

# Define the steps that should execute when the bundle is installed
install:
  - exec:
      description: "Install Hello World"
      command: ./helpers.sh
      arguments:
        - install

# Define the steps that should execute when the bundle is upgraded
upgrade:
  - exec:
      description: "World 2.0"
      command: ./helpers.sh
      arguments:
        - upgrade

# Define the steps that should execute when the bundle is uninstalled
uninstall:
  - exec:
      description: "Uninstall Hello World"
      command: ./helpers.sh
      arguments:
        - uninstall
